// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Course/model/course.dart';
import 'Cycle/model/cycle.dart';
import 'Evaluation/model/evaluation.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1559489475887437144),
      name: 'Course',
      lastPropertyId: const IdUid(5, 1304545568241409),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5897297951197310056),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7597624310784584220),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2831000902006989411),
            name: 'weigth',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 818514178281496133),
            name: 'score',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1304545568241409),
            name: 'cycleId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 3497654551752107378),
            relationTarget: 'Cycle')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'evaluations', srcEntity: 'Evaluation', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 6325997419402601084),
      name: 'Cycle',
      lastPropertyId: const IdUid(3, 5937953626750968727),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2629266586627284642),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8639050055455570614),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5937953626750968727),
            name: 'score',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'courses', srcEntity: 'Course', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(3, 8082493697622403075),
      name: 'Evaluation',
      lastPropertyId: const IdUid(5, 7863130741852949904),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2099996250803142111),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 150739233848118640),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3372063793000731092),
            name: 'weight',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8913163524422596042),
            name: 'score',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7863130741852949904),
            name: 'courseId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 6751851849821398164),
            relationTarget: 'Course')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 8082493697622403075),
      lastIndexId: const IdUid(2, 6751851849821398164),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Course: EntityDefinition<Course>(
        model: _entities[0],
        toOneRelations: (Course object) => [object.cycle],
        toManyRelations: (Course object) => {
              RelInfo<Evaluation>.toOneBacklink(
                      5, object.id, (Evaluation srcObject) => srcObject.course):
                  object.evaluations
            },
        getId: (Course object) => object.id,
        setId: (Course object, int id) {
          object.id = id;
        },
        objectToFB: (Course object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.weigth);
          fbb.addFloat64(3, object.score);
          fbb.addInt64(4, object.cycle.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Course(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              weigth:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              score:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.cycle.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.cycle.attach(store);
          InternalToManyAccess.setRelInfo(
              object.evaluations,
              store,
              RelInfo<Evaluation>.toOneBacklink(
                  5, object.id, (Evaluation srcObject) => srcObject.course),
              store.box<Course>());
          return object;
        }),
    Cycle: EntityDefinition<Cycle>(
        model: _entities[1],
        toOneRelations: (Cycle object) => [],
        toManyRelations: (Cycle object) => {
              RelInfo<Course>.toOneBacklink(
                      5, object.id, (Course srcObject) => srcObject.cycle):
                  object.courses
            },
        getId: (Cycle object) => object.id,
        setId: (Cycle object, int id) {
          object.id = id;
        },
        objectToFB: (Cycle object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.score);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Cycle(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              score:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          InternalToManyAccess.setRelInfo(
              object.courses,
              store,
              RelInfo<Course>.toOneBacklink(
                  5, object.id, (Course srcObject) => srcObject.cycle),
              store.box<Cycle>());
          return object;
        }),
    Evaluation: EntityDefinition<Evaluation>(
        model: _entities[2],
        toOneRelations: (Evaluation object) => [object.course],
        toManyRelations: (Evaluation object) => {},
        getId: (Evaluation object) => object.id,
        setId: (Evaluation object, int id) {
          object.id = id;
        },
        objectToFB: (Evaluation object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.weight);
          fbb.addFloat64(3, object.score);
          fbb.addInt64(4, object.course.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Evaluation(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              weight:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              score: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.course.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.course.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Course] entity fields to define ObjectBox queries.
class Course_ {
  /// see [Course.id]
  static final id = QueryIntegerProperty<Course>(_entities[0].properties[0]);

  /// see [Course.name]
  static final name = QueryStringProperty<Course>(_entities[0].properties[1]);

  /// see [Course.weigth]
  static final weigth =
      QueryIntegerProperty<Course>(_entities[0].properties[2]);

  /// see [Course.score]
  static final score = QueryDoubleProperty<Course>(_entities[0].properties[3]);

  /// see [Course.cycle]
  static final cycle =
      QueryRelationToOne<Course, Cycle>(_entities[0].properties[4]);
}

/// [Cycle] entity fields to define ObjectBox queries.
class Cycle_ {
  /// see [Cycle.id]
  static final id = QueryIntegerProperty<Cycle>(_entities[1].properties[0]);

  /// see [Cycle.name]
  static final name = QueryStringProperty<Cycle>(_entities[1].properties[1]);

  /// see [Cycle.score]
  static final score = QueryDoubleProperty<Cycle>(_entities[1].properties[2]);
}

/// [Evaluation] entity fields to define ObjectBox queries.
class Evaluation_ {
  /// see [Evaluation.id]
  static final id =
      QueryIntegerProperty<Evaluation>(_entities[2].properties[0]);

  /// see [Evaluation.name]
  static final name =
      QueryStringProperty<Evaluation>(_entities[2].properties[1]);

  /// see [Evaluation.weight]
  static final weight =
      QueryIntegerProperty<Evaluation>(_entities[2].properties[2]);

  /// see [Evaluation.score]
  static final score =
      QueryDoubleProperty<Evaluation>(_entities[2].properties[3]);

  /// see [Evaluation.course]
  static final course =
      QueryRelationToOne<Evaluation, Course>(_entities[2].properties[4]);
}
